/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basics;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

public class basics {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new basics().getGreeting());

        testExceptions();
        testPaths();
        testReadLines();
        testReadBuffer();


    }

    public static void testReadBuffer(){
        Path path = Paths.get("Zorkie.txt");

        try (BufferedReader reader = Files.newBufferedReader(path)) {
            // instead reading everything in at once (USES ALL DA MEMORY)
            // we read in the fle line by line using a "buffered" reader
            String line = reader.readLine();
            while(line != null) {
                System.out.println(line);
                line = reader.readLine();
            }

            // intelliJ calls this line!! it SHOULD be redundant
            reader.close();


        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static void testExceptions(){

        try {
            System.out.println(isStringLongerThan(null, 5));
        } catch (IllegalArgumentException ex){
            System.out.println("arg");
            ex.printStackTrace();
        } catch  (NullPointerException ex){
            System.out.println("null");
            ex.printStackTrace();
        } finally {
            System.out.println("THIS WILL ALWAYS RUN");
        }
    }



    public static boolean isStringLongerThan(String input, int length) {
        if (input == null){
//            throw new IllegalArgumentException("Input cannot be nulll");
        }

        return input.length() > length;
    }

    public static void testPaths(){
        // relative paths will be 'relative' to your starting location
        // for apps we're running, it's the root of your java project

        // "Absolute paths" are like "c:/my/path/here/unicorns.txt"

        Path path = Paths.get("Zorkie.txt");

        Path absPath = path.toAbsolutePath();

        System.out.println(absPath);

        // we can determine which we have (relative/absolute)
        System.out.println("PATH is: " + path.isAbsolute() + path);
        System.out.println("absPATH is: " + absPath.isAbsolute() + absPath);
    }

    public static void testReadLines(){
        Path path = Paths.get("ie.txt");

        // ArrayList is a type of list!!
        // so you can write this below (more later)
        List<String> list = new ArrayList<>();

        try{
            List<String> lines = Files.readAllLines(path);
            System.out.println("Line Size: " + lines.size());
        } catch (IOException ex){
            ex.printStackTrace();
        }
    }
}
